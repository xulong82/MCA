mycol = c("red", "red", "blue", "blue", rep("grey30", 30))
ggplot(melt(X), aes(x = X2, y = value)) + geom_bar(fill = mycol, stat = "identity")
ggplot(melt(X), aes(x = X2, y = value)) + geom_bar(colour = mycol, stat = "identity")
Xy = melt(X)
Xy$mycol = c("red", "red", "blue", "blue", rep("grey30", 30))
head(Xy)
ggplot(Xy, aes(x = X2, y = value)) + geom_bar(aes(fill = mycol), stat = "identity")
ggplot(Xy, aes(x = X2, y = value)) + geom_bar(aes(color = mycol), stat = "identity")
Xy$mycol = c(1, 1, 2, 2, rep(3, 30))
ggplot(Xy, aes(x = X2, y = value)) + geom_bar(aes(fill = mycol), color = "white", stat = "identity")
str(xy)
str(Xy)
levels(Xy$X2)
levels(Xy$X2) = paste0("S", 1:10)
ggplot(Xy, aes(x = X2, y = value)) + geom_bar(aes(fill = mycol), color = "white", stat = "identity")
Xy = melt(X)
Xy = melt(X)
Xy$X2 = factor(Xy$X2, levels = paste0("S", 1:10))
ggplot(Xy, aes(x = X2, y = value)) + geom_bar(aes(fill = mycol), color = "white", stat = "identity")
Xy$mycol = c(1, 1, 2, 2, rep(3, 30))
ggplot(Xy, aes(x = X2, y = value)) + geom_bar(aes(fill = mycol), color = "white", stat = "identity")
ggplot(Xy, aes(x = X2, y = value, fill = mycol)) +
geom_bar(color = "white", stat = "identity") +
scale_fill_manual(values = c("red", "blue", "grey30"))
nrow(Xy)
head(Xy)
Xy$col = "grey30"
head(Xy)
Xy$col[grep("T_[48]Nve", Xy$X1)] = "red"
Xy$col[grep("T_[48]Mem", Xy$X1)] = "blue"
head(Xy)
ggplot(Xy, aes(x = X2, y = value, fill = mycol)) +
geom_bar(color = "white", stat = "identity") +
scale_fill_manual(values = c("red", "blue", "grey30"))
ggplot(Xy, aes(x = X2, y = value, fill = col)) +
geom_bar(color = "white", stat = "identity") +
scale_fill_manual(values = c("red", "blue", "grey30"))
ggplot(Xy, aes(x = X2, y = value, fill = col)) +
geom_bar(color = "white", stat = "identity")
ggplot(Xy, aes(x = X2, y = value), fill = col) +
geom_bar(color = "white", stat = "identity")
mycol = rep("grey30", nrow(Xy))
mycol[grep("T_[48]Nve", Xy$X1)] = "red"
mycol[grep("T_[48]Mem", Xy$X1)] = "blue"
ggplot(Xy, aes(x = X2, y = value), fill = mycol) +
geom_bar(color = "white", stat = "identity")
mycol
ggplot(Xy, aes(x = X2, y = value)) +
geom_bar(fill = mycol, color = "white", stat = "identity")
head(X)
rownames(X)
mycol = rep("grey30", nrow(Xy))
mycol[grep("T_[48]Nve", Xy$X1)] = "red"
mycol[grep("T_[48]Mem$", Xy$X1)] = "blue"
ggplot(Xy, aes(x = X2, y = value)) +
geom_bar(fill = mycol, color = "white", stat = "identity")
heatmap(cor(X))
heatmap(cor(t(X)))
hcX <- hcluster(X, method = "pearson", link = "average") %>% as.phylo
plot(hcX, direction="downward")
plot(hcX, direction="downward", col = mycol)
plot(hcX, direction="downward", tip.col = mycol)
powers = c(c(1:10), seq(from = 12, to = 20, by = 2))
sft.x = pickSoftThreshold(X, powerVector = powers, verbose = 5)
sft.x = pickSoftThreshold(t(X), powerVector = powers, verbose = 5)
sft.y = pickSoftThreshold(t(Y), powerVector = powers, verbose = 5)
power = c(c(1:10), seq(from = 12, to = 20, by = 2))
sft.x = pickSoftThreshold(t(X), powerVector = power)
sft.y = pickSoftThreshold(t(Y), powerVector = power)
sft.x = pickSoftThreshold(t(X), powerVector = 1:20)
sft.y = pickSoftThreshold(t(Y), powerVector = 1:20)
power = c(c(1:10), seq(12, 20, by = 2))
sft.x = pickSoftThreshold(t(X), powerVector = power)
sft.y = pickSoftThreshold(t(Y), powerVector = power)
plot(power, rep(0, length(power)), type = "n", ylab = "Signed R^2")
text(power, -sign(sft.x$fitIndices[,3])*sft.x$fitIndices[,2], labels = power, col = "red")
text(power, -sign(sft.y$fitIndices[,3])*sft.y$fitIndices[,2], labels = power, col = "blue")
abline(h = 0.90,col = "green")
net.x = blockwiseModules(t(X), power = 1, verbose = 3)
table(net.x$colors)
net.y = blockwiseModules(t(Y), power = 20, verbose = 3)
table(net.y$colors)
barplot(net.y$MEs[, 1])
signal
apply(net.y$MEs, 2, function(x) cor(signal[1, ], x))
plot(apply(net.y$MEs, 2, function(x) cor(signal[1, ], x)), type = "b")
corNve = apply(net.y$MEs, 2, function(x) cor(signal[1, ], x))
summary(corNve)
corMem = apply(net.y$MEs, 2, function(x) cor(signal[3, ], x))
corMem = apply(net.y$MEs, 2, function(x) cor(signal[3, ], x)); summary(corMem)
barplot(net.y$MEs[, which.max(corNve)])
head(X)
dim(net.y$MEs)
rbind(X[1:4, ], t(net.y$MEs))
cor(rbind(X[1:4, ], t(net.y$MEs)))
cor(rbind(t(X[1:4, ]), net.y$MEs))
dim(t(X[1:4, ]))
dim(net.y$MEs)
cor(cbind(t(X[1:4, ]), net.y$MEs))
cor(cbind(t(X[1:4, ]), net.y$MEs))[1:4, ]
sig_me_cor <- cor(cbind(t(X[1:4, ]), net.y$MEs))[1:4, ]
hsig_me_cor
sig_me_cor
sig_mes_cor <- cor(cbind(t(X[1:4, ]), net.y$MEs))[1:4, -c(1:4)]
sig_mes_cor
rowMax(sig_mes_cor)
which.max(sig_mes_cor)
apply(sig_mes_cor, 1, which.max)
barplot(net.y$MEs[, 24])
barplot(net.y$MEs[, 43])
P
plot(1:P0, rep(0, P), type = "n")
plot(1:P0, rep(0, P0), type = "n")
apply(X[1:4, ], 1, function(x) lines(1:P0, x))
plot(1:P0, rep(0, P0), type = "n", ylim = c(0, 0.2))
apply(X[1:4, ], 1, function(x) lines(1:P0, x))
plot(1:P0, rep(0, P0), type = "n", ylim = c(0, 0.1))
apply(X[1:4, ], 1, function(x) lines(1:P0, x))
plot(1:P0, rep(0, P0), type = "n", ylim = c(0, 0.1))
apply(X[1:4, ], 1, function(x) lines(1:P0, x, col = "red"))
mes_select <- apply(sig_mes_cor, 1, which.max)
mes_select <- apply(sig_mes_cor, 1, which.max)
apply(net.y$colors[, mes_select], 2, function(x) lines(1:P0, x, col = "blue"))
net.y$colors[, mes_select]
mes_select
dim(net.y$colors)
apply(net.y$MEs[, mes_select], 2, function(x) lines(1:P0, x, col = "blue"))
plot(1:P0, rep(0, P0), type = "n")
apply(X[1:4, ], 1, function(x) lines(1:P0, x/max(x), col = "red"))
plot(1:P0, rep(0, P0), type = "n", ylim = c(0, 1))
apply(X[1:4, ], 1, function(x) lines(1:P0, x/max(x), col = "red"))
apply(net.y$MEs[, mes_select], 2, function(x) lines(1:P0, x/max(x), col = "blue"))
plot(1:P0, rep(0, P0), type = "n", ylim = c(-1, 1))
apply(X[1:4, ], 1, function(x) lines(1:P0, x/max(x), col = "red"))
apply(net.y$MEs[, mes_select], 2, function(x) lines(1:P0, x/max(x), col = "blue"))
apply(net.y$MEs[, mes_select], 2, function(x) lines(1:P0, x/max(x), type = "b", col = "blue"))
plot(1:P0, rep(0, P0), type = "n", ylim = c(-2, 1))
apply(X[1:4, ], 1, function(x) lines(1:P0, x/max(x), col = "red"))
apply(net.y$MEs[, mes_select], 2, function(x) lines(1:P0, x/max(x), type = "b", col = "blue"))
mes_select
head(X)
plot(1:P0, rep(0, P0), type = "n", ylim = c(-2, 1))
apply(X[1:4, ], 1, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), col = "red"))
apply(net.y$MEs[, mes_select], 2, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), type = "b", col = "blue"))
plot(1:P0, rep(0, P0), type = "n", ylim = c(0, 1))
apply(X[1:4, ], 1, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), col = "red"))
apply(net.y$MEs[, mes_select], 2, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), type = "b", col = "blue"))
plot(1:P0, rep(0, P0), type = "n", ylim = c(0, 1))
apply(X[1:2, ], 1, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), col = "red"))
apply(net.y$MEs[, mes_select[1:2]], 2, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), type = "b", col = "blue"))
plot(1:P0, rep(0, P0), type = "n", ylim = c(0, 1))
apply(X[3:4, ], 1, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), col = "red"))
apply(net.y$MEs[, mes_select[3:4]], 2, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), type = "b", col = "blue"))
svd.x <- svd(X)
svd.y <- svd(Y)
dim(svd.x$v)
svd.x <- svd(t(X))
lapply(1:6, function(x) barplot(svd.y$v[, x], main = x))
dim(svd.x$v)
svd.x <- svd(t(X))
dim(svd.x$v)
dim(X)
par(mfrow = c(2, 3))
lapply(1:6, function(x) barplot(svd.x$v[, x], main = x))
Xp = t(X)
Xp = Xp - rowMens(Xp)
Xp = Xp - rowMeans(Xp)
svd.x <- svd(Xp)
lapply(1:6, function(x) barplot(svd.x$v[, x], main = x))
Xp = t(X) - rowMeans(t(X))
svd.x <- svd(Xp)
lapply(1:6, function(x) barplot(svd.x$v[, x], main = x))
Xp
svd.x <- svd(X)
lapply(1:6, function(x) barplot(svd.x$v[, x], main = x))
svd.x <- svd(X - rowMeans(X))
lapply(1:6, function(x) barplot(svd.x$v[, x], main = x))
svd.y <- svd(Y - rowMeans(Y))
plot(cumsum(svd.x$d) / sum(svd.x$d), type = "b")
plot(cumsum(svd.y$d) / sum(svd.y$d), type = "b")
lapply(1:6, function(x) barplot(svd.y$v[, x], main = x))
lapply(1:6, function(x) barplot(svd.y$v[, x], main = x))
pc.x <- diag(svd.x$d) %*% svd.x$v
pc.y <- diag(svd.y$d) %*% svd.y$v
cov.xy = cov(svd.x$v, svd.y$v)
cov.xy
lapply(1:6, function(x) barplot(pc.x[, x], main = x))
lapply(1:6, function(x) barplot(svd.x$v[, x], main = x))
diag(svd.x$d)
svd.x$v
pc.x <- diag(svd.x$d) %*% t(svd.x$v)
t(svd.x$v)
lapply(1:6, function(x) barplot(pc.x[, x], main = x))
lapply(1:6, function(x) barplot(pc.x[x, ], main = x))
lapply(1:6, function(x) barplot(pc.y[x, ], main = x))
pc.y <- diag(svd.y$d) %*% t(svd.y$v)
lapply(1:6, function(x) barplot(pc.y[x, ], main = x))
cov.xy = cov(svd.x$v, svd.y$v)
cov.xy
cor.xy = cor(pc.x[1:10, 1:10], pc.y[1:10, ])
cor.xy
cor.xy = cor(rbind(pc.x[1:10, 1:10], pc.y[1:10, ]))
cor.xy
cor.xy = cor(t(rbind(pc.x[1:10, 1:10], pc.y[1:10, ])))
cor.xy
cor.xy = cor(t(rbind(pc.x[1:10, ], pc.y[1:10, ])))
cor.xy
pc.x[1:10, ]
svd.x$u
plot(svd.x$u[, 1])
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
plot(svd.x$u[, 1], xlab = "", ylab = "")
plot(svd.x$u[, 1], col = mycol, xlab = "", ylab = "")
dim(X)
scale.x = t(scale(t(X)))
dim(scale.x)
scale.y = t(scale(t(Y)))
xy = rbind(scale.x, scale.y)
svd.xy = svd(xy)
lapply(1:6, function(x) barplot(svd.xy$v[, x], main = x))
pc.xy <- diag(svd.xy$d) %*% t(svd.xy$v)
par(mfrow = c(2, 3))
lapply(1:6, function(x) barplot(svd.xy$v[, x], main = x))
dim(svd.xy$u)
plot(cumsum(svd.xy$d) / sum(svd.xy$d), type = "b")
summary(svd.xy$u[, 1])
quantile(svd.xy$u[, 1], 0.95)
svd.xy$u[, 1][abs(svd.xy$u[, 1]) > quantile(svd.xy$u[, 1], 0.95)]
rownames(svd.xy$u)
rownames(xy)
head(rownames(xy))
rownames(svd.x$u)
u_signal <- svd.xy$u[, 1]
summary(u_signal)
u_signal <- svd.xy$u[, 1]; names(u_signal) <- rownames(xy)
u_signal[abs(u_signal) > quantile(u_signal, 0.95)]
cell_genes <- u_signal[abs(u_signal) > quantile(u_signal, 0.95)]
cell_genes <- u_signal[abs(u_signal) > quantile(u_signal, 0.95)]
cell_genes
head(cell_genes)
cell_genes <- u_signal[abs(u_signal) > quantile(u_signal, 0.9)]
head(cell_genes)
cell_genes <- u_signal[abs(u_signal) > quantile(u_signal, 0.75)]
head(cell_genes)
cell_gene <- u_signal[abs(u_signal) > quantile(u_signal, 0.75)]
plot(cell_gene)
par(mfrow = c(1, 1))
plot(cell_gene)
plot(cell_gene[! grepl("^T_", names(cell_gene))])
points(cell_gene[grepl("^T_", names(cell_gene))])
points(cell_gene[grepl("^T_", names(cell_gene))], pch = 3, size = 5)
points(cell_gene[grepl("^T_", names(cell_gene))], pch = 3, cex = 2)
points(cell_gene[grepl("^T_", names(cell_gene))], pch = 1, cex = 2)
points(cell_gene[grepl("^T_", names(cell_gene))], pch = 2, cex = 2, col = c(1, 1, 2, 2))
points(cell_gene[grepl("^T_", names(cell_gene))], pch = 2, cex = 2, col = c("red", "red", "blue", "blue"))
plot(cell_gene[! grepl("^T_", names(cell_gene))])
points(cell_gene[grepl("^T_", names(cell_gene))], pch = 2, cex = 2, col = c("red", "red", "blue", "blue"))
cell_gene[grepl("^T_", names(cell_gene))]
head(names(cell_gene), 20)
head(cell_gene, n = 20)
cell_gene <- u_signal[abs(u_signal) > quantile(u_signal, 0.85)]
head(cell_gene, n = 20)
cell_gene <- u_signal[abs(u_signal) > quantile(u_signal, 0.9)]
head(cell_gene, n = 20)
par(mfrow = c(1, 1))
plot(cell_gene[! grepl("_", names(cell_gene))]) # all genes
plot(cell_gene[! grepl("_", names(cell_gene))], ylab = "") # all genes
points(cell_gene[grepl("^T_[48]Nve", names(cell_gene))], pch = 2, cex = 2, col = "red")
points(cell_gene[grepl("^T_[48]Nve", names(cell_gene))], pch = 3, cex = 2, col = "red")
points(cell_gene[grepl("^T_[48]Nve", names(cell_gene))], pch = 4, cex = 2, col = "red")
points(cell_gene[grepl("^T_[48]Nve", names(cell_gene))], pch = 17, cex = 2, col = "red")
points(cell_gene[grepl("^T_[48]Mem", names(cell_gene))], pch = 17, cex = 2, col = "blue")
dim(X)
dim(Y)
Xp = X - rowMeans(X)
Yp = protein - rowMeans(protein)
Yp = Y - rowMeans(Y)
C = X %*% t(Y) / (ncol(X) - 1)
svd.c = svd(C)
u = svd$u # left singular vector
v = svd$v # right signular vector
svd.c = svd(C)
u = svd$u # left singular vector
v = svd$v # right signular vector
u = svd.c$u # left singular vector
v = svd.c$v # right signular vector
d = svd.c$d # cross-covariance
plot(cumsum(d), type = "b")
plot(cumsum(d) / sum(d), type = "b")
plot(cumsum(d) / sum(d), type = "b", ylim = c(0, 1))
plot(cumsum(d) / sum(d), type = "b") # striking contrast with variance of idependent PCA
A = t(X) %*% u # projections of X onto u
B = t(Y) %*% v # projections of Y onto v
plot(A[, 1], type = "b")
lines(B[, 1], type = "b", col = "red")
plot(A[, 1], type = "b", ylim = c(-1, 1))
lines(B[, 1], type = "b", col = "red")
summary(B[, 1])
dim(u)
dim(v)
plot(u[, 1], type = "b")
summary(v[, 1])
dim(A)
dim(B)
dim(u)
dim(v)
summary(u[, 1])
plot(u[, 1] / max(u[, 1]), type = "b")
lines(v[, 1] / max(v[, 1]), type = "b", col = "red")
plot(A[, 1] / max(A[, 1]), type = "b")
lines(B[, 1] / max(B[, 1]), type = "b", col = "red")
plot((A[, 1] - min(A[, 1])) / (max(A[, 1] - min(A[, 1]))), type = "b")
plot((B[, 1] - min(B[, 1])) / (max(B[, 1] - min(B[, 1]))), type = "b", col = "red")
plot((A[, 1] - min(A[, 1])) / (max(A[, 1] - min(A[, 1]))), type = "b")
lines((B[, 1] - min(B[, 1])) / (max(B[, 1] - min(B[, 1]))), type = "b", col = "red")
dim(A)
dim(X)
dim(Y)
Zx = X %*% A
Zy = Y %*% A # Robyn
Zy = Y %*% B # Classical
dim(Zx)
dim(Zy)
Zx[, 1]
dim(A)
dim(Zx)
dim(Zy)
head(Zx)
plot(Zx[, 1])
Zx[, 1]
plot(A[ ,1])
plot(X[, 1])
plot(X[1, ])
hist(Zx[, 1])
hist(Zy[, 1])
hist(Zx[, 1])
plot(Zx[, 1])
dim(A)
dim(B)
set1 = apply(Zx, 2, function(x) rownames(Zx)[x > quantile(x, 0.95)])
set1
dim(Zx)
plot(Zx[1, ])
plot((A[, 2] - min(A[, 2])) / (max(A[, 2] - min(A[, 2]))), type = "b")
lines((B[, 2] - min(B[, 2])) / (max(B[, 2] - min(B[, 2]))), type = "b", col = "red")
plot((A[, 1] - min(A[, 1])) / (max(A[, 1] - min(A[, 1]))), type = "b")
lines((B[, 1] - min(B[, 1])) / (max(B[, 1] - min(B[, 1]))), type = "b", col = "red")
plot((A[, 2] - min(A[, 2])) / (max(A[, 2] - min(A[, 2]))), type = "b")
lines((B[, 2] - min(B[, 2])) / (max(B[, 2] - min(B[, 2]))), type = "b", col = "red")
plot((A[, 3] - min(A[, 3])) / (max(A[, 3] - min(A[, 3]))), type = "b")
lines((B[, 3] - min(B[, 3])) / (max(B[, 3] - min(B[, 3]))), type = "b", col = "red")
plot(X[1, ])
plot(Zx[, 1], Zx[, 2])
text(Zx[, 1], Zx[, 2], rownames(Zx))
plot(Zx[, 1], Zx[, 2], type = "n")
text(Zx[, 1], Zx[, 2], rownames(Zx))
text(Zx[, 1], Zx[, 2], rownames(Zx), col = mycol)
load("nci60.rdt")
str(nci60)
str(immgen)
dim(immgen)
str(nci60)
str(immgen)
library(ape)
library(amap)
library(dplyr)
library(reshape)
library(ggplot2)
library(genefilter)
library(RColorBrewer)
library(WGCNA)
load("~/Dropbox/GitHub/MCA/nci60.rdt")
load("~/Dropbox/GitHub/Lupus/Immgen/immgenList.rdt") # version:20150811
immgen <- immgenList$immgen # 224 transcriptome
str(nci60)
dim(nci60)
dim(immgen)
(type <- gsub("_.*", "", names(immgen)))
(tissue <- gsub(".*_", "", names(immgen)))
immgen <- immgen[tissue == "Sp"] # only spleen cells
(type <- gsub("_.*", "", names(immgen)))
immgen <- immgen[type %in% c("B", "DC", "T", "NK", "NKT")]
(type <- gsub("_.*", "", names(immgen)))
(names(immgen) <- gsub("_Sp", "", names(immgen)))
summary(rowVars(immgen))
immgen <- immgen[rowVars(immgen) > 0.1, ]
M <- ncol(immgen) # cell number
N <- nrow(immgen) # gene number
P0 <- 10 # sample group number
signal <- rbind( # TRUE signal: adjustable
T_4Nve = seq(from = 0.1, to = 0.01, length.out = P0),
T_8Nve = seq(from = 0.1, to = 0.01, length.out = P0),
T_4Mem = seq(from = 0.01, to = 0.2, length.out = P0),
T_8Mem = seq(from = 0.01, to = 0.2, length.out = P0)
); colnames(signal) <- paste0("S", 1:P0)
pseudo <- lapply(1:1, function(x) { # replicates
signal_noise = signal + rnorm(2 * P0, 0.01, 0.01)
random = rnorm(M * P0, mean = 1/M * 2, sd = 0.02)
random = matrix(random, nrow = M, ncol = P0)
random = random[-c(1:4), ]
rownames(random) = setdiff(names(immgen), rownames(signal))
X = rbind(signal_noise, random) # M by P0
X[X < 0] = 0
X = sweep(X, 2, colSums(X), "/")
Y = as.matrix(immgen[, rownames(X)]) %*% X # N by P0
Y = sweep(Y, 2, colSums(Y), "/") * 1e5
list(X = X, Y = Y)
})
X <- do.call(cbind, lapply(pseudo, function(x) x$X))
Y <- do.call(cbind, lapply(pseudo, function(x) x$Y))
dim(X)
dim(Y)
dim(X); dim(Y)
X <- do.call(cbind, lapply(pseudo, function(x) x$X)); dim(X)
Y <- do.call(cbind, lapply(pseudo, function(x) x$Y)); dim(Y)
Xg <- melt(X) # graph X
Xg$X2 <- factor(Xy$X2, levels = paste0("S", 1:10))
mycol <- rep("grey30", nrow(Xg))
mycol[grep("T_[48]Nve$", Xg$X1)] = "red"
mycol[grep("T_[48]Mem$", Xg$X1)] = "blue"
ggplot(Xg, aes(x = X2, y = value)) + geom_bar(fill = mycol, color = "white", stat = "identity")
hcX <- hcluster(X, method = "pearson", link = "average") %>% as.phylo
plot(hcX, direction="downward", tip.col = mycol)
power <- c(c(1:10), seq(12, 20, by = 2))
sft.x <- pickSoftThreshold(t(X), powerVector = power)
sft.y <- pickSoftThreshold(t(Y), powerVector = power)
plot(power, rep(0, length(power)), type = "n", ylab = "Signed R^2")
text(power, -sign(sft.x$fitIndices[,3])*sft.x$fitIndices[,2], labels = power, col = "red")
text(power, -sign(sft.y$fitIndices[,3])*sft.y$fitIndices[,2], labels = power, col = "blue")
abline(h = 0.90,col = "green")
net.x = blockwiseModules(t(X), power = 1, verbose = 3)
net.x = blockwiseModules(t(X), power = 1)
net.y = blockwiseModules(t(Y), power = 20)
table(net.x$colors) # wrong signal in X
table(net.y$colors) # extract eigen-genes that correlate with the true signal
sig_mes_cor <- cor(cbind(t(X[1:4, ]), net.y$MEs))[1:4, -c(1:4)]
mes_select <- apply(sig_mes_cor, 1, which.max)
mes_select
plot(1:P0, rep(0, P0), type = "n", ylim = c(0, 1))
apply(X[1:2, ], 1, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), col = "red"))
apply(net.y$MEs[, mes_select[1:2]], 2, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), type = "b", col = "blue"))
plot(1:P0, rep(0, P0), type = "n", ylim = c(0, 1))
apply(X[3:4, ], 1, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), col = "red"))
apply(net.y$MEs[, mes_select[3:4]], 2, function(x) lines(1:P0, (x - min(x)) / (max(x) - min(x)), type = "b", col = "blue"))
svd.x <- svd(X - rowMeans(X))
svd.y <- svd(Y - rowMeans(Y))
pc.x <- diag(svd.x$d) %*% t(svd.x$v)
pc.y <- diag(svd.y$d) %*% t(svd.y$v)
par(mfrow = c(2, 3))
lapply(1:6, function(x) barplot(pc.x[x, ], main = x))
lapply(1:6, function(x) barplot(pc.y[x, ], main = x))
par(mfrow = c(1, 1))
plot(svd.x$u[, 1], col = mycol, xlab = "", ylab = "")
dim(X)
Xm = X[, 9:10, 1:8]
Xm = X[, c(9:10, 1:8)]
svd.xm <- svd(Xm - rowMeans(Xm))
par(mfrow = c(2, 3))
lapply(1:6, function(x) barplot(svd.xm$v[, x], main = x))
Xm = X[, c(9:10, 5:8, 1:4)]
svd.xm <- svd(Xm - rowMeans(Xm))
lapply(1:6, function(x) barplot(svd.xm$v[, x], main = x))
for(x in 1:6) barplot(svd.xm$v[, x], main = x)
par(mfrow = c(2, 3))
for(x in 1:6) barplot(svd.xm$v[, x], main = x)
scale.x = t(scale(t(X)))
scale.y = t(scale(t(Y)))
xy = rbind(scale.x, scale.y)
svd.xy = svd(xy)
pc.xy <- diag(svd.xy$d) %*% t(svd.xy$v)
par(mfrow = c(2, 3))
for(x in 1:6) barplot(svd.xy$v[, x], main = x)
u_signal <- svd.xy$u[, 1]; names(u_signal) <- rownames(xy)
cell_gene <- u_signal[abs(u_signal) > quantile(u_signal, 0.9)]
par(mfrow = c(1, 1))
plot(cell_gene[! grepl("_", names(cell_gene))], ylab = "") # all genes
points(cell_gene[grepl("^T_[48]Nve", names(cell_gene))], pch = 17, cex = 2, col = "red")
points(cell_gene[grepl("^T_[48]Mem", names(cell_gene))], pch = 17, cex = 2, col = "blue")
Xp = X - rowMeans(X)
Yp = Y - rowMeans(Y)
C = X %*% t(Y) / (ncol(X) - 1)
svd.c = svd(C)
u = svd.c$u # left singular vector
v = svd.c$v # right signular vector
d = svd.c$d # cross-covariance
plot(cumsum(svd.xy$d)/sum(svd.xy$d), type = "b", ylim = c(0, 1))
plot(cumsum(d)/sum(d), type = "b", ylim = c(0, 1))
plot(cumsum(svd.xy$d)/sum(svd.xy$d), type = "b", ylim = c(0, 1))
A = t(X) %*% u # projections of X onto u
B = t(Y) %*% v # projections of Y onto v
plot((A[, 1] - min(A[, 1])) / (max(A[, 1] - min(A[, 1]))), type = "b")
lines((B[, 1] - min(B[, 1])) / (max(B[, 1] - min(B[, 1]))), type = "b", col = "red")
plot((A[, 1] - min(A[, 1])) / (max(A[, 1] - min(A[, 1]))), type = "b", ylab = "")
lines((B[, 1] - min(B[, 1])) / (max(B[, 1] - min(B[, 1]))), type = "b", col = "red")
plot((A[, 2] - min(A[, 2])) / (max(A[, 2] - min(A[, 2]))), type = "b", ylab = "")
lines((B[, 2] - min(B[, 2])) / (max(B[, 2] - min(B[, 2]))), type = "b", col = "red")
plot((A[, 3] - min(A[, 3])) / (max(A[, 3] - min(A[, 3]))), type = "b", ylab = "")
lines((B[, 3] - min(B[, 3])) / (max(B[, 3] - min(B[, 3]))), type = "b", col = "red")
Zx = X %*% A
Zy = Y %*% A # Robyn
Zy = Y %*% B # Classical
plot(Zx[, 1], Zx[, 2], type = "n")
plot(Zx[, 1], Zx[, 2], type = "n", xlab = "PC1", ylab = "PC2")
text(Zx[, 1], Zx[, 2], rownames(Zx), col = mycol)
plot(Zx[, 1], Zx[, 2], type = "n", xlab = "1", ylab = "2")
text(Zx[, 1], Zx[, 2], rownames(Zx), col = mycol)
ggplot(Xg, aes(x = X2, y = value)) + geom_bar(fill = mycol, color = "white", stat = "identity")
mycol
head(X)
mycol <- c("red", "red", "blue", "blue", rep("grey30", 30))
ggplot(Xg, aes(x = X2, y = value)) + geom_bar(fill = rep(mycol, 10), color = "white", stat = "identity")

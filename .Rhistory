lines(1, 1)
abline(0, 1)
qqnorm(sqrt(var))
library(limma)
?fitFDist
fitFDist(apply(y, 1, var), 14)
ps <- (seq(along=s2)-0.5)/length(s2)
s2 <- rowVars(y)
ps <- (seq(along=s2)-0.5)/length(s2)
ps
summary(ps)
estiamte=fitFDist(apply(y, 1, var), 14)
estimate$scale
x=fitFDist(apply(y, 1, var), 14)
x$scale
?qf
estimates = x
ps <- (seq(along=s2)-0.5)/length(s2)
theoretical<- qf(ps,14,estimates$df2)*estimates$scale
theoretical
hist(theoretical)
summary(ps)
seq(along = 5)
seq(along = 1:5)
qqplot(sqrt( theoretical ), sqrt( s2 ),ylim=LIM,xlim=LIM)
qqplot(sqrt( theoretical ), sqrt( s2 ))
?fitFDist
0.45 * 0.55
0.45 * 0.55 / 20
0.45 * 0.55 * 20
sqrt(0.45 * 0.55 * 20)
sqrt(0.45 * 0.55 * 20) / 20
library(Biobase)
library(SpikeInSubset)
data(rma95)
y <- exprs(rma95)
pData(rma95)
g <- factor(rep(0:1,each=3))
spike <- rownames(y) %in% colnames(pData(rma95))
spike
library(genefilter)
x = rowttests(y, g)
?rowttests
str(x)
head(x)
sig = x$p.value < 0.01
table(sig)
1 - sum(spike & sig ) / sum(sig)
head(y)
?rowVar
rowvar
?rowVars
sds = rowSds(y[, 1:3])
sds
spike
sig
group = spike
group[sig] = true_pos
x = rep("T_POS", length(spike))
x
x[(! sig) & spike] = "F_NEG"
x[(! sig) & (! spike)] = "T_NEG"
x[(sig) & (! spike)] = "F_POS"
x
boxplot(x)
?boxplot
table(x)
boxplot(sds, x)
boxplot(sds ~ x)
boxplot(split(sds, x))
library(limma)
fit <- lmFit(y, design=model.matrix(~ g))
colnames(coef(fit))
fit[[1]]
length(fit)
coef(fit)
head(coef(fit))
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
fit <- eBayes(fit)
posteriorSD = sqrt(fit$s2.post)
plot(sampleSD, posteriorSD)
abline(0, 1)
mean(sampleSD)
pvals = fit$p.value[,2]
length(pvals)
length(spike)
1 - sum(pvals < 0.01 & spike) / sum(spike)
sum(pvals < 0.01 & spike) / sum(pvals < 0.01)
library(limma)
fit = lmFit(y, design=model.matrix(~ g))
fit = eBayes(fit)
##second coefficient relates to diffences between group
pvals = fit$p.value[,2]
1 - sum(pvals < 0.01 & spike) / sum(spike)
pvals
pvals < 0.01
table(pvals < 0.01)
names(fit)
head(fit$p.value)
pvals = fit$p.value[, 2]
table(pvals < 0.01)
table(spikes)
table(spike)
rowttest(y)
rowttests(y)
y = rowttests(y)
head(y)
table(y[, 3] < 0.01)
y = rowttests(y, g)
g
y <- exprs(rma95)
z = rowttests(y, g)
table(z[, 3] < 0.01)
pvals
all(rownames(pvals) == names(spike))
sum((! pvals < 0.01) & spike)/ sum(pvals < 0.01)
sum((pvals < 0.01) & (! spike))/ sum(pvals < 0.01)
5.3 * 52
?pt
?qr
head(y)
y1 = y[1, ]
y1
g
lm(y1 ~ g)
summary(lm(y1 ~ g))
g
-0.0744 / 0.10605
?mrlm
?rlm
library(MASS)
?rlm
head(y)
rowVars(y)
vars = rowVars(y)
hist(vars)
hist(sqrt(vars))
?seq
seq(0, 1, by = 0.01)
p = seq(0, 1, by = 0.01)
6 * p * (1 - p)
sum(6 * p * (1 - p))
pi = 6 * p * (1 - p)
plot(p, pi)
mean(pi)
head(y)
dim(y)
x = rowVars(y[, 1:3])
x
n = length(x)
n
?pmax
pmax(x)
min(5:1)
pmin(5:1)
pmin(5:1, pi)
pmax(x, 0)
k = rnorm(10)
k
pmax(k, 0)
log(x)
digamma(11/2)
?digamma
log(11/2)
z <- log(x)
e <- z-digamma(df1/2)+log(df1/2)
df1 = 11
e <- z-digamma(df1/2)+log(df1/2)
emean <- mean(e)
evar <- sum((e-emean)^2)/(n-1)
evar <- evar - mean(trigamma(df1/2))
evar
df2 <- 2*trigammaInverse(evar)
s20 <- exp(emean+digamma(df2/2)-log(df2/2))
df2
s20
fitFDist(x, 11)
?sampling
library(rstan)
?sampling
log10
install.packages("ExomeDepth")
library(ExomeDepth)
data(exons.hg19)
head(exons.hg19)
data(ExomeCount)
ExomeCount
colnames(ExomeCount)
ExomeCount.dafr <- as(ExomeCount[, colnames(ExomeCount)], "data.frame")
head(ExomeCount.dafr)
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), "chr", "")
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), pattern = "chr", replacement = "")
head(ExomeCount.dafr)
99e-2
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(GenomicFeatures)
library(org.Hs.eg.db)
library(tidyr)
library(reshape)
library(dplyr)
f = p * (1-p)
f = 1 / p * (1-p)
f = 1 / p / (1-p)
x = seq(0, 1, 0.01)
x
y = log(x / (1-x))
plot(x, y)
plot(y, x)
plot(y, x, type = "l")
?prod
prod(1, 2, 3)
require(grDevices) # for colours
data(volcano)
str(volcano)
head(volcano)
x <- 10*1:nrow(volcano)
y <- 10*1:ncol(volcano)
x
y
?filled.contour
filled.coutour(x, y, )
filled.coutour(x, y, z)
filled.contour(x, y, z)
filled.contour(x, y, volcano)
post <- function (a,b,y,n,x) prod((invlogit(a+b*x))^y*(1-invlogit(a+b*x))^(n-y))
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
a = 0.5
b = 1
sapply(1:4, function(i) post(a, b, y[i], n[i], x[i]))
??invlogit
library(gtools)
post <- function (a,b,y,n,x) prod((invlogit(a+b*x))^y*(1-invlogit(a+b*x))^(n-y))
sapply(1:4, function(i) post(a, b, y[i], n[i], x[i]))
?invlogit
library(arm)
sapply(1:4, function(i) post(a, b, y[i], n[i], x[i]))
post(a, b, y, n, x)
(invlogit(a+b*x))^y*(1-invlogit(a+b*x))^(n-y)
for (a in seq(-5, 10, 0.1)) {
for (b in seq(-10, 40, 0.1)) {
post(a, b, y, n, x)
}
}
seq(-5, 10, 0.1)
z = NULL
for (a in seq(-5, 10, 0.1)) {
for (b in seq(-10, 40, 0.1)) {
z = c(z, post(a, b, y, n, x))
}
}
head(z)
150 * 500
151 * 501
z = matrix(z, ncol = 501)
a = seq(-5, 10, 0.1)
b = seq(-10, 40, 0.1)
filled.contour(a, b, z)
sum(z)
max(z)
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
a0 = seq(-5, 10, 0.1)
b0 = seq(-10, 40, 0.1)
post <- function (a,b,y,n,x) prod((invlogit(a+b*x))^y*(1-invlogit(a+b*x))^(n-y))
triangle.prior <- function(x) {
if (x >= 0 && x < 0.25)
8 * x
else if (x >= 0.25 && x <= 1)
8/3 - 8 * x/3
else 0
}
plot(seq(-1, 1, 0.01), triangle.prior(seq(-1, 1, 0.01)))
seq(-1, 1, 0.01)
triangle.prior(seq(-1, 1, 0.01))
y = sapply(x, triangle.prior)
x
y
x = seq(-1, 1, 0.01)
y = sapply(x, triangle.prior)
x
y
plot(x, y)
x = seq(-1, 2, 0.01)
y = sapply(x, triangle.prior)
plot(x, y)
posterior.function <- function(theta, n, y) {
(theta^y) * (1 - theta)^(n - y) * triangle.prior(theta)
}
m <- 100
grid.points <- seq(from = 0, to = 1, length.out = m)
grid.point
grid.points
unnormal.post.ord <- posterior.function(theta = grid.points, n = 500, y = 285)
unnormal.post.ord
k <- 1/m
normal.constant <- sum(k * unnormal.post.ord)
normal.constant
post.ord <- unnormal.post.ord/normal.constant
post.ord
plot(grid.points, post.ord)
plot(grid.points, post.ord, type = "l", col = "red")
?sample
posterior.triangle.1 <- sample(grid.points, size = 10000, replace = T, prob = post.ord)
hist(posterior.triangle.1)
hist(posterior.triangle.1, xlim = c(0, 1))
hist(posterior.triangle.1, xlim = c(0, 1))
posterior.triangle.1
poisson.posterior <- function(theta, y, x, prior.mean.a, prior.var.a, prior.mean.b, prior.var.b) {
a <- theta[1]
b <- theta[2]
lambda <- exp(a + b * x)
log.like <- sum(dpois(y, lambda = lambda, log = T))
log.prior.a <- dnorm(a, mean = prior.mean.a, sd = sqrt(prior.var.a), log = T)
log.prior.b <- dnorm(b, mean = prior.mean.b, sd = sqrt(prior.var.b), log = T)
log.post <- log.like + log.prior.a + log.prior.b
return(exp(log.post))
}
library(Zelig)
install.packages("Zelig")
library(Zelig)
data(sanction)
sanction
head(sanction)
plot(sanction$coop, sanction$num)
y.vec <- sanction$num
x.vec <- sanction$coop
y.vec
x.vec
mu.a <- mu.b <- 0
sigma2.a <- sigma2.b <- 20
mle <- glm(num ~ coop, data = sanction, family = poisson)$coef
mle
?glm
mle.se <- summary(glm(num ~ coop, data = sanction, family = poisson))$coef[, 2]
mle.se
grid.a <- seq(from = mle[1] - 5 * mle.se[1], to = mle[1] + 5 * mle.se[1], length.out = 200)
grid.b <- seq(from = mle[2] - 5 * mle.se[2], to = mle[2] + 5 * mle.se[2], length.out = 200)
grid.a
grid.b
grid.points <- expand.grid(grid.a, grid.b)
head(grid.points)
head(grid.a)
head(grid.b)
post.ord <- apply(grid.points, MARGIN = 1, FUN = poisson.posterior,
y = y.vec, x = x.vec, prior.mean.a = mu.a, prior.var.a = sigma2.a,
prior.mean.b = mu.b, prior.var.b = sigma2.b)
str(post.ord)
sample.indices <- sample(1:nrow(grid.points), size = 10000, replace = T, prob = post.ord)
sim.posterior <- grid.points[sample.indices, ]
dim(sim.posterior)
log_post <- function (a,b,y,n,x) sum (dbinom (y, n, invlogit(a+b*x), log.p=TRUE))
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
a0 = seq(-5, 10, 0.1)
b0 = seq(-10, 40, 0.1)
a = a0[1]
b = b0[1]
dbinom (y, n, invlogit(a+b*x), log.p=TRUE)
invlogit(a+b*x)
?dbinom
sum(invlogit(a+b*x))
dbinom(y, n, invlogit(a+b*x))
dbinom(y[1], n[1], invlogit(a+b*x[1]))
dbinom(y[1], n[1], invlogit(a+b*x[1]), log.p = T)
log_post <- function (a,b,y,n,x) sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
log_post <- function (a,b,y,n,x) sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
dbinom (y, n, invlogit(a+b*x), log=TRUE)
grid.points <- expand.grid(a0, b0)
post.ord <- apply(grid.points, MARGIN = 1, FUN = log_post, y = y, n = n, x = x)
head(grid.points)
log_post <- function (a,b,y,n,x) exp^(sum (dbinom (y, n, invlogit(a+b*x), log=TRUE)))
post.ord <- apply(grid.points, MARGIN = 1, function(grid) log_post(grid[1], grid[2], y = y, n = n, x = x)
)
log_post <- function (a,b,y,n,x) exp^(sum (dbinom (y, n, invlogit(a+b*x), log=TRUE)))
post.ord <- apply(grid.points, 1, function(grid) log_post(grid[1], grid[2], y = y, n = n, x = x))
head(grid.points)
post.ord <- apply(grid.points, 1, function(t) log_post(a = t[1], b = t[2], y = y, n = n, x = x))
log_post <- function (a,b,y,n,x) {
loglik = sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
return(exp^(loglik))
}
log_post <- function (a,b,y,n,x) {
loglik = sum (dbinom (y, n, invlogit(a+b*x), log=TRUE))
return(exp(loglik))
}
post.ord <- apply(grid.points, 1, function(t) log_post(a = t[1], b = t[2], y = y, n = n, x = x))
post.ord
filled.contour(grid.points, post.ord)
filled.contour(grid.points, z = post.ord)
filled.contour(x = grid.points[, 1], y = grid.points[, 2], z = post.ord)
head(grid.points)
tail(grid.points)
filled.contour(x = grid.points$Var1, y = grid.points$Var2, z = post.ord)
?filled.contour
hist(post.ord)
sample.indices <- sample(1:nrow(grid.points), size = 10000, replace = T, prob = post.ord)
sim.posterior <- grid.points[sample.indices, ]
hist(sim.posterior[, 1])
hist(sim.posterior[, 2])
contour(x = grid.points$Var1, y = grid.points$Var2, z = post.ord)
grid.points$Var1
image.maker <- function(coords, value){
N <- length(unique(coords[,1]))
image.out <- matrix(NA, nrow = N, ncol = N)
coords[,1] <- as.numeric(factor(coords[,1]))
coords[,2] <- as.numeric(factor(coords[,2]))
for (i in 1:nrow(coords))
image.out[coords[i,1], coords[i,2]] <- value[i]
return(image.out)
}
image.maker(grid.points, post.ord)
for (t1 in a0) {
for (t2 in b0) {
log_post(a = t1, b = t2, y = y, n = n, x = x)
}
}
post.ord <- NULL
for (t1 in a0) {
for (t2 in b0) {
post0 = log_post(a = t1, b = t2, y = y, n = n, x = x)
post.ord = c(post.ord, post0)
}
}
post.ord <- NULL
for (t1 in a0) {
for (t2 in b0) {
post0 = log_post(a = t1, b = t2, y = y, n = n, x = x)
post.ord = rbind(post.ord, c(t1, t2, post0))
}
}
dim(post.ord)
sample.indices <- sample(1:nrow(post.ord), size = 10000, replace = T, prob = post.ord[, 3])
head(sample.indices)
sim.posterior <- post.ord[sample.indices, ]
hist(sim.posterior[, 1])
hist(sim.posterior[, 2])
contour(post.ord)
head(post.ord)
head(post.ord)
contour(x = post.ord[, 1], y = post.ord[, 2], z = post.ord[, 3])
library(dplyr)
library(ggplot2)
setwd("~/Dropbox/GitHub/pmca")
source("get.mca.R")
source("get.inter.R")
source("get.scores.R")
source("iterative.proc.R")
source("permutation.proc.R")
source("pmca.R")
source("match.patterns.R")
load("dataForPMCA_chosenGenes.RData")
head(X)
head(Y)
head(X)
mca.real <- get.mca(X,Y) # get Zx, Zy, sigma, etc.
names(mca.real)
mca.real$sigma
plot(mca.real$sigma)
plot(mca.real$sigma, type = "b")
by = 6; method = "each"; B = 1000; alpha = .05; plot = TRUE;
scores.real <- get.scores(mca.real$Zx,mca.real$Zy)
str(mca.real$Zx)
str(scores.real)
scores.neg <- get.scores(-mca.real$Zx,mca.real$Zy) #for anti-associated lists
str(scores.neg)
scores.rand <- permutation.proc(X,Y,method=method,B=B) # get scores for all B permutations
w <- apply(mca.real$Zx,2,sd) # get starting window vector
set.seed(B) # for reproducibilty
it.result <- iterative.proc(scores.rand,alpha=alpha,w=w,method=method,by=by,plot=plot,tau=1)
g <- match.patterns(scores.real,w=it.result$wopt)
get.inter(g,4)
h <- match.patterns(scores.neg,w=it.result$wopt)
fpr <- it.result$FPR
if (!is.null(dim(fpr))) {
rownames(fpr) <- rownames(X)
colnames(fpr) <- paste0("component=",1:ncol(fpr))
} else {
names(fpr) <- paste0("component=",1:length(fpr))
}
names(it.result$wopt) <- paste0("component=",1:length(it.result$wopt))
result <- list(mapped=g,antimapped=h,FPR=fpr,wopt=it.result$wopt,tau=it.result$tau) # RESULTS
result
inter = get.inter(g,5)
rownames(inter) <- colnames(inter) <- rownames(X)
inter <- inter[which(rowSums(inter)>0),]
inter <- inter[,which(colSums(inter)>0)]
inter
mapped.mat <- data.frame(sample=rownames(inter),cellType=rep("nn",nrow(inter)))
mapped.mat$cellType <- as.character(mapped.mat$cellType)
J <- 5 #component
for (i in 1:nrow(inter)) {
d <- paste(g[[which(rownames(X)==rownames(inter)[i])]][[J]],collapse=",")
mapped.mat$cellType[i] <- d
}
mapped.mat
plot(mca.real$sigma) # plot of singular values of the covariance matrix
str(mca.real$Zx)
str(mca.real$Zy)
mca.real$sigma
mca.real$Zx[1, 1]
result
names(result)
result$mapped
mapped.mat
inter

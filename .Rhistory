inter <- inter[which(rowSums(inter) > 0), ]
inter <- inter[, which(colSums(inter) > 0)]
inter
mapped <- data.frame(sample = rownames(inter), cellType = rep("nn", nrow(inter)))
mapped$cellType = as.character(mapped$cellType)
for (i in 1:nrow(inter)) {
d <- paste(g[[which(rownames(X)==rownames(inter)[i])]][[by]], collapse=",")
mapped$cellType[i] <- d
}
mapped
g
it.result
by = 1; method = "each"; B = 1000; alpha = .05; plot = TRUE;
scores.pos <- get.scores(Zx, Zy) # distance
scores.neg <- get.scores(-Zx, Zy) # anti-associated
set.seed(B)
scores.ran <- permutation.proc(X, Y, method = method, B = B) # get scores for permutations
w <- apply(Zx, 2, sd) # get starting window vector
set.seed(B)
it.result <- iterative.proc(scores.ran, alpha, w, method = method, by = by, plot=plot, tau=0.3)
by = 2; method = "each"; B = 1000; alpha = .05; plot = TRUE;
scores.pos <- get.scores(Zx, Zy) # distance
scores.neg <- get.scores(-Zx, Zy) # anti-associated
set.seed(B)
scores.ran <- permutation.proc(X, Y, method = method, B = B) # get scores for permutations
w <- apply(Zx, 2, sd) # get starting window vector
set.seed(B)
it.result <- iterative.proc(scores.ran, alpha, w, method = method, by = by, plot=plot, tau=0.3)
it.result$tau
g <- match.patterns(scores.pos, w=it.result$wopt) # associated
g
g <- match.patterns(scores.neg, w=it.result$wopt) # anti-associated
g
g <- match.patterns(scores.pos, w=it.result$wopt) # associated
g
library(ape)
library(amap)
library(dplyr)
rm(list = ls())
setwd("~/Dropbox/GitHub/pmca")
load("dataForPMCA_chosenGenes.RData")
cell = rownames(Y) # single cell RNA-seq
sample = rownames(X) # time serial AD bulk RNA-seq
(cell = rownames(Y)) # single cell RNA-seq
(sample = rownames(X)) # time serial AD bulk RNA-seq
geno = gsub(".*(WT|APP).*", "\\1", sample)
month = gsub(".*(2m|4m|5m|6m).*", "\\1", sample)
group = c("WT2m", "WT4m", "WT5m", "WT6m", "APP2m", "APP4m", "APP5m", "APP6m")
group = factor(paste0(geno, month), levels = group)
group
X = t(sapply(levels(group), function(x) colMeans(X[group == x, ])))
head(X)
X = sweep(X, 2, X[1, ], "-")[-1, ] # WT:2m reference
head(X)
hc1 <- hcluster(Y, method = "pearson", link = "average") %>% as.phylo
plot(hc1, cex=0.7, direction = "downward")
Xp = X - rowMeans(X)
Yp = Y - rowMeans(Y)
C = Xp %*% t(Yp) / ncol(X) # R's
svd.c = svd(C)
u = svd.c$u # left singular vector
v = svd.c$v # right signular vector
d = svd.c$d # cross-covariance
plot(cumsum(d)/sum(d), type = "b", ylim = c(0, 1))
plot(cumsum(d)/sum(d), type = "b", ylim = c(0, 1))
plot(cumsum(d)/sum(d), type = "b", ylim = c(0, 1), ylab = "Cumulative explained deviation (%)")
text(x = 1:48, y = cumsum(d)/sum(d), labels = 1:48, col = "red", adj = -1)
text(x = 1:48, y = cumsum(d)/sum(d), labels = cumsum(d)/sum(d), col = "red", adj = -1)
plot(cumsum(d)/sum(d), type = "b", ylim = c(0, 1), ylab = "Cumulative explained deviation (%)")
text(x = 1:48, y = cumsum(d)/sum(d), labels = 1:48, col = "red", adj = -1)
plot(cumsum(d^2)/sum(d^2), type = "b", ylim = c(0, 1), ylab = "Cumulative explained deviation (%)")
text(x = 1:48, y = cumsum(d^2)/sum(d^2), labels = 1:48, col = "red", adj = -1)
cumsum(d^2)/sum(d^2)
plot(cumsum(d^2)/sum(d^2), type = "b", ylim = c(0, 1), ylab = "Cumulative variance (%)")
pdf("variance")
plot(cumsum(d^2)/sum(d^2), type = "b", ylim = c(0, 1), ylab = "Cumulative variance (%)")
text(x = 1:48, y = cumsum(d^2)/sum(d^2), labels = 1:48, col = "red", adj = -1)
dev.off()
pdf("variance.pdf", width = 8, height = 5)
plot(cumsum(d^2)/sum(d^2), type = "b", ylim = c(0, 1), ylab = "Cumulative variance (%)")
text(x = 1:48, y = cumsum(d^2)/sum(d^2), labels = 1:48, col = "red", adj = -1)
dev.off()
pdf("variance.pdf", width = 7, height = 5)
plot(cumsum(d^2)/sum(d^2), type = "b", ylim = c(0, 1), ylab = "Cumulative variance (%)")
text(x = 1:48, y = cumsum(d^2)/sum(d^2), labels = 1:48, col = "red", adj = -1)
dev.off()
pdf("variance.pdf", width = 6, height = 4)
plot(cumsum(d^2)/sum(d^2), type = "b", ylim = c(0, 1), ylab = "Cumulative variance (%)")
text(x = 1:48, y = cumsum(d^2)/sum(d^2), labels = 1:48, col = "red", adj = -1)
dev.off()
dim(C)
A = t(Xp) %*% u # projections of X onto u
B = t(Yp) %*% v # projections of Y onto v
dim(A)
dim(B)
Zx = X %*% A
Zx <- t(scale(t(Zx),scale = T, center = F))
Zy = Y %*% A # Robyn
Zy <- t(scale(t(Zy),scale = T, center = F))
source("pmca.R")
source("get.mca.R")
source("get.inter.R")
source("get.scores.R")
source("match.patterns.R")
source("iterative.proc.R")
source("permutation.proc.R")
by = 2; method = "each"; B = 1000; alpha = .05; plot = TRUE;
scores.pos <- get.scores(Zx, Zy) # distance
scores.neg <- get.scores(-Zx, Zy) # anti-associated
set.seed(B)
scores.ran <- permutation.proc(X, Y, method = method, B = B) # get scores for permutations
w <- apply(Zx, 2, sd) # get starting window vector
set.seed(B)
it.result <- iterative.proc(scores.ran, alpha, w, method = method, by = by, plot=plot, tau=0.3)
it.result$tau
g <- match.patterns(scores.pos, w=it.result$wopt) # associated
g
g2 <- match.patterns(scores.neg, w=it.result$wopt) # anti-associated
g2
inter = get.inter(g, by)
rownames(inter) <- colnames(inter) <- rownames(X)
inter <- inter[which(rowSums(inter) > 0), ]
inter <- inter[, which(colSums(inter) > 0)]
inter
mapped <- data.frame(sample = rownames(inter), cellType = rep("nn", nrow(inter)))
mapped$cellType = as.character(mapped$cellType)
for (i in 1:nrow(inter)) {
d <- paste(g[[which(rownames(X)==rownames(inter)[i])]][[by]], collapse=",")
mapped$cellType[i] <- d
}
mapped
by = 1
inter = get.inter(g, by)
rownames(inter) <- colnames(inter) <- rownames(X)
inter <- inter[which(rowSums(inter) > 0), ]
inter <- inter[, which(colSums(inter) > 0)]
inter
mapped <- data.frame(sample = rownames(inter), cellType = rep("nn", nrow(inter)))
mapped$cellType = as.character(mapped$cellType)
for (i in 1:nrow(inter)) {
d <- paste(g[[which(rownames(X)==rownames(inter)[i])]][[by]], collapse=",")
mapped$cellType[i] <- d
}
mapped
inter
by = 2
inter = get.inter(g, by)
rownames(inter) <- colnames(inter) <- rownames(X)
inter <- inter[which(rowSums(inter) > 0), ]
inter <- inter[, which(colSums(inter) > 0)]
inter
mapped <- data.frame(sample = rownames(inter), cellType = rep("nn", nrow(inter)))
mapped$cellType = as.character(mapped$cellType)
for (i in 1:nrow(inter)) {
d <- paste(g[[which(rownames(X)==rownames(inter)[i])]][[by]], collapse=",")
mapped$cellType[i] <- d
}
mapped
install.packages("stargazer")
library(stargazer)
library(stargazer)
stargazer(attitude)
attitude
stargazer(mapped)
stargazer(mapped, summary = F)
mapped
colnames(mapped) = c("sample", "cell type")
stargazer(mapped, summary = F)
inter
stargazer(inter, summary = F)
setwd("~/Dropbox/GitHub/Ad")
load("./data/brain2014.rdt"); glm.dt <- brain.tpm
cutoff <- quantile(c(as.matrix(glm.dt)), 0.25)  # TPM level
glm.dt <- glm.dt[apply(glm.dt, 1, function(x) max(x) > cutoff & sum(x > 0) > round(ncol(glm.dt) / 10)), ]
age <- factor(gsub("^.*(2m|4m|5m|6m).*", "\\1", colnames(glm.dt)), levels = c("2m", "4m", "5m", "6m"))
group <- factor(gsub("^.*(WT|APP).*", "\\1", colnames(glm.dt)), levels = c("WT", "APP"))
uid <- paste(age, group, sep = "_"); table(uid)
batch <- factor(gsub("^.*(2014|mouse).*", "\\1", colnames(glm.dt)), levels = c("2014", "mouse"))
conditions <- c("2m_WT", "2m_APP", "4m_WT", "4m_APP", "5m_WT", "5m_APP", "6m_WT", "6m_APP")
conditions <- conditions[conditions %in% uid]
fit0 <- apply(glm.dt, 1, function (x) summary(lm(x ~ age + group + batch + age*group)))
fit0 <- apply(glm.dt, 1, function (x) lm(x ~ age + group + batch + age*group))
app = fit0[["App"]]
app
stargazer(x)
stargazer(app)
?"stargazer
)
""
"
?"stargazer"
stargazer(app, summary = F)
stargazer(summary(app)$coefficients, summary = F)
head(X)
plot(X[1, ])
plot(X[1, ], type = "l")
rownames(Y)
line(Y["Int1", ], type = "l", col = "red")
lines(Y["Int1", ], type = "l", col = "red")
plot(Xp[1, ], type = "l")
lines(Yp["Int1", ], type = "l", col = "red")
head(X)
plot(scale(Xp["WT4m", ]), type = "l")
lines(scale(Yp["Int1", ]), type = "l", col = "red")
x = scale(Xp["WT4m", ]
)
y = scale(Yp["Int1", ])
y = y - y[1]
plot(x, type = "l")
lines(y, type = "l", col = "red")
x
x[1]
x = scale(Xp["WT4m", ])
y = scale(Yp["Int1", ])
x = x - x[1]
y = y - y[1]
plot(x, type = "l")
lines(y, type = "l", col = "red")
head(x)
head(y)
dt = cbind(bulk = x, sc = y)
dim(dt)
head(dt)
dt = data.frame(bulk = x, sc = y)
head(dt)
head(melt(dt))
library(reshape)
head(melt(dt))
head(dt)
library(reshape2)
head(melt(dt))
head(melt(as.matrix(dt)))
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, color = X2)) + geom_points()
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, color = X2)) + geom_point()
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, color = X2)) + geom_line()
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, fill = X2)) + geom_line()
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value)) + geom_line()
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2)) + geom_line()
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = group)) + geom_line()
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) + geom_line()
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(angle = 90)) +
xlab("") + ylab("Sample Number")
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("Sample Number")
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(angle = 90))
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("Sample Number") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(angle = 90))
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(angle = 90))
pdf("profile.pdf", width = 10, height = 5)
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(angle = 90))
dev.off()
pdf("profile.pdf", width = 10, height = 5)
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(size = 5, angle = 90))
dev.off()
setwd("~/Dropbox/GitHub/pmca")
pdf("profile.pdf", width = 10, height = 5)
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(size = 5, angle = 90),
legend.title = element_blank())
dev.off()
mapped
x = scale(Xp["APP5m", ])
y = scale(Yp["Int1", ])
x = x - x[1]
y = y - y[1]
dt = data.frame(bulk = x, sc = y)
pdf("profile.pdf", width = 10, height = 5)
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(size = 5, angle = 90),
legend.title = element_blank())
dev.off()
x = scale(Xp["APP2m", ])
y = scale(Yp["CA2Pyr2", ])
x = x - x[1]
y = y - y[1]
dt = data.frame(bulk = x, sc = y)
plot(x, type = "l")
lines(y, type = "l", col = "red")
pdf("profile.pdf", width = 10, height = 5)
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(size = 5, angle = 90),
legend.title = element_blank())
dev.off()
pdf("profile.pdf", width = 10, height = 5)
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line(alpha = 0.5) + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(size = 5, angle = 90),
legend.title = element_blank())
dev.off()
pdf("profile.pdf", width = 10, height = 5)
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line(alpha = 0.9) + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(size = 5, angle = 90),
legend.title = element_blank())
dev.off()
pdf("profile.pdf", width = 10, height = 5)
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(size = 5, angle = 90),
legend.title = element_blank())
dev.off()
X[, "Pmp"]
colnames(X)
X[, "Prnp"]
Y[, "Prnp"]
x = scale(Xp["APP2m", ])
y = scale(Yp["CA2Pyr2", ])
dt = data.frame(bulk = x, sc = y)
plot(x, type = "l")
lines(y, type = "l", col = "red")
pdf("profile.pdf", width = 10, height = 5)
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("firebrick1", "dodgerblue3")) +
theme(axis.text.x = element_text(size = 5, angle = 90),
legend.title = element_blank())
dev.off()
pdf("profile.pdf", width = 10, height = 5)
ggplot(melt(as.matrix(dt)), aes(x = X1, y = value, group = X2, color = X2)) +
geom_line() + theme_bw() + xlab("") + ylab("") +
scale_color_manual(values = c("dodgerblue3", "firebrick1")) +
theme(axis.text.x = element_text(size = 5, angle = 90),
legend.title = element_blank())
dev.off()
(gene = colnames(X))
X = X[, gene != "Prnp"]
Y = Y[, gene != "Prnp"]
geno = gsub(".*(WT|APP).*", "\\1", sample)
month = gsub(".*(2m|4m|5m|6m).*", "\\1", sample)
group = c("WT2m", "WT4m", "WT5m", "WT6m", "APP2m", "APP4m", "APP5m", "APP6m")
group = factor(paste0(geno, month), levels = group)
rm(list = ls())
setwd("~/Dropbox/GitHub/pmca")
load("dataForPMCA_chosenGenes.RData")
(gene = colnames(X))
X = X[, gene != "Prnp"]
Y = Y[, gene != "Prnp"]
(cell = rownames(Y)) # single cell RNA-seq
(sample = rownames(X)) # time serial AD bulk RNA-seq
geno = gsub(".*(WT|APP).*", "\\1", sample)
month = gsub(".*(2m|4m|5m|6m).*", "\\1", sample)
group = c("WT2m", "WT4m", "WT5m", "WT6m", "APP2m", "APP4m", "APP5m", "APP6m")
group = factor(paste0(geno, month), levels = group)
X = t(sapply(levels(group), function(x) colMeans(X[group == x, ])))
X = sweep(X, 2, X[1, ], "-")[-1, ] # WT:2m reference
hc1 <- hcluster(Y, method = "pearson", link = "average") %>% as.phylo
plot(hc1, cex=0.7, direction = "downward")
Xp = X - rowMeans(X)
Yp = Y - rowMeans(Y)
C = Xp %*% t(Yp) / ncol(X) # R's
svd.c = svd(C)
u = svd.c$u # left singular vector
v = svd.c$v # right signular vector
d = svd.c$d # cross-covariance
plot(cumsum(d^2)/sum(d^2), type = "b", ylim = c(0, 1), ylab = "Cumulative variance (%)")
text(x = 1:48, y = cumsum(d^2)/sum(d^2), labels = 1:48, col = "red", adj = -1)
A = t(Xp) %*% u # projections of X onto u
B = t(Yp) %*% v # projections of Y onto v
Zx = X %*% A
Zx <- t(scale(t(Zx),scale = T, center = F))
Zy = Y %*% A # Robyn
Zy <- t(scale(t(Zy),scale = T, center = F))
source("pmca.R")
source("get.mca.R")
source("get.inter.R")
source("get.scores.R")
source("match.patterns.R")
source("iterative.proc.R")
source("permutation.proc.R")
by = 2; method = "each"; B = 1000; alpha = .05; plot = TRUE;
scores.pos <- get.scores(Zx, Zy) # distance
scores.neg <- get.scores(-Zx, Zy) # anti-associated
set.seed(B)
scores.ran <- permutation.proc(X, Y, method = method, B = B) # get scores for permutations
w <- apply(Zx, 2, sd) # get starting window vector
set.seed(B)
it.result <- iterative.proc(scores.ran, alpha, w, method = method, by = by, plot=plot, tau=0.3)
it.result$tau
g <- match.patterns(scores.pos, w=it.result$wopt) # associated
g2 <- match.patterns(scores.neg, w=it.result$wopt) # anti-associated
by = 2
inter = get.inter(g, by)
rownames(inter) <- colnames(inter) <- rownames(X)
inter <- inter[which(rowSums(inter) > 0), ]
inter <- inter[, which(colSums(inter) > 0)]
inter
mapped <- data.frame(sample = rownames(inter), cellType = rep("nn", nrow(inter)))
mapped$cellType = as.character(mapped$cellType)
for (i in 1:nrow(inter)) {
d <- paste(g[[which(rownames(X)==rownames(inter)[i])]][[by]], collapse=",")
mapped$cellType[i] <- d
}
mapped
by = 1
inter = get.inter(g, by)
rownames(inter) <- colnames(inter) <- rownames(X)
inter <- inter[which(rowSums(inter) > 0), ]
inter <- inter[, which(colSums(inter) > 0)]
inter
mapped <- data.frame(sample = rownames(inter), cellType = rep("nn", nrow(inter)))
mapped$cellType = as.character(mapped$cellType)
for (i in 1:nrow(inter)) {
d <- paste(g[[which(rownames(X)==rownames(inter)[i])]][[by]], collapse=",")
mapped$cellType[i] <- d
}
mapped
colnames(mapped) = c("sample", "cell type")
str(scores.pos)
which(cell = "CA2Pyr2")
which(cell == "CA2Pyr2")
which(sample == "APP2m")
score.pos[30, 4, ]
scores.pos[30, 4, ]
by = 2
inter = get.inter(g, by)
rownames(inter) <- colnames(inter) <- rownames(X)
inter <- inter[which(rowSums(inter) > 0), ]
inter <- inter[, which(colSums(inter) > 0)]
inter
mapped <- data.frame(sample = rownames(inter), cellType = rep("nn", nrow(inter)))
mapped$cellType = as.character(mapped$cellType)
for (i in 1:nrow(inter)) {
d <- paste(g[[which(rownames(X)==rownames(inter)[i])]][[by]], collapse=",")
mapped$cellType[i] <- d
}
mapped
install.packages("rstan")
library(rstan)
?normal
?normal()
?stan::normal()
library(rstan)
stan101 <- "
data {
int <lower=0> N;
real y[N];
}
parameters {
real mu;
real sigma;
}
model {
y ~ normal(mu, sigma);
}
generated quantities {
real lpd;
{
vector[N] lpd1;
for (n in 1:N) {
lpd1[n] <- normal_log(y[n], mu, sigma);
}
lpd <- sum(lpd1);
}
}
"
rnorm(10, 1, 1)
hist(rnorm(20, 1, 1))
dat <- list(N = 20, y = rnorm(20, 1, 1))
fit <- stan(model_code = stan101, data = dat)
rm(list = ls())
stan101 <- "
data {
int <lower=0> N;
real y[N];
}
parameters {
real mu;
real sigma;
}
model {
y ~ normal(mu, sigma);
}
generated quantities {
real lpd;
{
vector[N] lpd1;
for (n in 1:N) {
lpd1[n] <- normal_log(y[n], mu, sigma);
}
lpd <- sum(lpd1);
}
}
"
dat <- list(N = 20, y = rnorm(20, 1, 1))
fit <- stan(model_code = stan101, data = dat)
dat
fit <- stan(model_code = stan101, data = dat)
fit <- rstan::stan(model_code = stan101, data = dat)
